apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: sonarqube-scanner
  labels:
    {{- include "openshift-pipelines-configurations.labels" . | nindent 4 }}
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    Run the sona manev task

  workspaces:
    - name: source
      description: "Workspace containing the code which needs to be scanned by SonarQube"
    - name: maven-settings
      description: "Workspace containing mave configurations"      
  params:
    - name: SONAR_HOST_URL
      description: SonarQube server URL
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
    - name: PROJECT_VERSION
      description: "Version of the project. Default: 1.0"
      default: "1.0"
    - name: SONAR_ORGANIZATION
      description: "The organization in sonarqube where the project exists"
      default: ""
    - name: MAVEN_IMAGE
      description: "The maven image to use"
      default: image-registry.openshift-image-registry.svc:5000/openshift/java:latest
  steps:
    - name: sonar-maven-scan
      image: $(params.MAVEN_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
      - name: SONAR_HOST_URL
        value: $(params.SONAR_HOST_URL)
      - name: PROJECT_VERSION
        value: $(params.PROJECT_VERSION)        
      script: |
        #!/usr/bin/env bash
        export SONAR_TOKEN=$(cat /sonar/SONARQUBE_TOKEN)
        echo $SONAR_TOKEN
        ./mvnw -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.login=admin -Dsonar.password=${SONAR_TOKEN} -Dsonar.projectKey=$(params.SONAR_PROJECT_KEY) -Dmaven.repo.local=$(workspaces.maven-settings.path)
      volumeMounts:
      - name: sonar
        mountPath: /sonar
        readOnly: true        
  volumes:
    - name: sonar
      secret:
        secretName: sonarqube-credentials       