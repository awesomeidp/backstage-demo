apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "backstage.labels" . | nindent 4 }}
  name: {{ include "backstage.fullname" . }}-configuration
data:
  app-config.yaml: |
    app:
      title: Scaffolded Backstage App
      baseUrl: https://{{ include "backstage.fullname" . }}.apps.{{ .Values.base_domain }}

    organization:
      name: My Demo Company

    backend:
      baseUrl: https://{{ include "backstage.fullname" . }}.apps.{{ .Values.base_domain }}
      listen:
        port: 7000
      csp:
        connect-src: ["'self'", 'http:', 'https:']
        # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
        # Default Helmet Content-Security-Policy values can be removed by setting the key to false
      cors:
        origin: https://{{ include "backstage.fullname" . }}.apps.{{ .Values.base_domain }}
        methods: [GET, POST, PUT, DELETE]
        credentials: true
      {{- if not .Values.usePostgresql }}  
      database:
        client: sqlite3
        connection: ':memory:'
      {{- else }}  
     # config options: https://node-postgres.com/api/client
        client: pg
        connection:
          host: {{ include "backstage.fullname" . }}-postgresql.{{ .Release.Namespace }}.svc
          port: 5432
          user: postgres
          password: changeit
          # https://node-postgres.com/features/ssl
          ssl: 
          # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
            ca: $file: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
      {{- end }}      
      cache:
        store: memory
      # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

    integrations:
      github:
        - host: github.com
          token: ${GITHUB_TOKEN}

    proxy:
      '/sonarqube':
        target: https://sonarqube-sonarqube.apps.{{ .Values.base_domain }}/api
        allowedMethods: ['GET']
        # note that the colon after the token is required
        auth: '${SONARQUBE_TOKEN}:'
      '/prometheus/api':
        # url to the api and path of your hosted prometheus instance
        target: https://thanos-querier-openshift-monitoring.apps.{{ .Values.base_domain }}/api/v1/
        headers:
          Authorization: Bearer ${KUBE_TOKEN}        

    sonarQube:
      baseUrl: https://sonarqube-sonarqube.apps.{{ .Values.base_domain }}/api

    # Reference documentation http://backstage.io/docs/features/techdocs/configuration
    # Note: After experimenting with basic setup, use CI/CD to generate docs
    # and an external cloud storage when deploying TechDocs for production use-case.
    # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'local' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

    auth:
      environment: development
      providers:
        github:
          development:
            clientId: ${AUTH_GITHUB_CLIENT_ID}
            clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

    scaffolder:
      github:
        token: ${GITHUB_TOKEN}
        visibility: public # or 'internal' or 'private'

    kubernetes:
      serviceLocatorMethod:
        type: 'multiTenant'
      clusterLocatorMethods:
        - type: 'config'
          clusters:
            - url: https://api.{{ .Values.base_domain }}:6443
              name: openshift
              authProvider: 'serviceAccount'
              skipTLSVerify: true
              serviceAccountToken: ${KUBE_TOKEN}
              dashboardUrl: https://console-openshift-console.apps.{{ .Values.base_domain }}
              dashboardApp: openshift

    catalog:
      providers:
        keycloakOrg:
          default:
            baseUrl: dummy
            loginRealm: dummy
            realm: dummy
            clientId: dummy
            clientSecret: dummy
      github:
          # the provider ID can be any camelCase string
          components:
            organization: '${GITHUB_ORG}' # string
            catalogPath: '/catalog-info.yaml' # string
            filters:
              branch: 'main' # string
              repository: '.*' # Regex
            schedule: # optional; same options as in TaskScheduleDefinition
              # supports cron, ISO duration, "human duration" as used in code
              frequency: { minutes: 30 }
              # supports ISO duration, "human duration" as used in code
              timeout: { minutes: 3 }
          systems:
            organization: '${GITHUB_ORG}' # string
            catalogPath: '/systems/*.yaml' # string
            filters:
              branch: 'main' # string
              repository: '.*-gitops' # Regex
            schedule: # optional; same options as in TaskScheduleDefinition
              # supports cron, ISO duration, "human duration" as used in code
              frequency: { minutes: 30 }
              # supports ISO duration, "human duration" as used in code
              timeout: { minutes: 3 }
          resources:
            organization: '${GITHUB_ORG}' # string
            catalogPath: '/resources/*.yaml' # string
            filters:
              branch: 'main' # string
              repository: '.*-gitops' # Regex
            schedule: # optional; same options as in TaskScheduleDefinition
              # supports cron, ISO duration, "human duration" as used in code
              frequency: { minutes: 30 }
              # supports ISO duration, "human duration" as used in code
              timeout: { minutes: 3 }                                          
      rules:
        - allow: [Component, System, API, Group, User, Resource, Location]
      locations:
        - type: url
          target: https://github.com/${GITHUB_ORG}/software-templates/blob/main/scaffolder-templates/quarkus-template/template.yaml
          rules:
            - allow: [Template]
        - type: url
          target: https://github.com/${GITHUB_ORG}/software-templates/blob/main/scaffolder-templates/dotnet-template/template.yaml
          rules:
            - allow: [Template]            
        - type: url
          target: https://github.com/${GITHUB_ORG}/software-templates/blob/main/scaffolder-templates/app-template/template.yaml
          rules:
            - allow: [Template]
        - type: url
          target: https://github.com/${GITHUB_ORG}/software-templates/blob/main/scaffolder-templates/cockroach-template/template.yaml
          rules:
            - allow: [Template]      
        - type: url
          target: https://github.com/${GITHUB_ORG}/software-templates/blob/main/scaffolder-templates/vm-template/template.yaml
          rules:
            - allow: [Template]            


        # - type: github-discovery
        #   target: https://github.com/${GITHUB_ORG}
          
        # - type: github-org
        #   target: https://github.com/${GITHUB_ORG}
        # Systems discovery  
        # - type: github-discovery
        #   target: https://github.com/${GITHUB_ORG}/approved-namespaces/blob/-/systems/*.yaml
        #   rules:
        #     - allow: [System]
        
        # vms discovery
        # - type: github-discovery
        #   target: https://github.com/${GITHUB_ORG}/*-gitops/blob/-/vms/resource.yaml
        #   rules:
        #     - allow: [Resource]            

        # Resources discovery    
        # - type: github-discovery
        #   target: https://github.com/${GITHUB_ORG}/*-gitops/blob/-/resources/*.yaml
        #   rules:
        #     - allow: [Resource] 

    # this is to make the janus image happy
    ocm:
      hub:
        name: dummy
        url: dummy
        serviceAccountToken: dummy

    argocd:
      username: dummy
      password: dummy
      appLocatorMethods:
        - type: 'config'
          instances:
            - name: argoInstance1
              url: dummy
              token: dummy
            - name: argoInstance2
              url: dummy
              token: dummy                                              

